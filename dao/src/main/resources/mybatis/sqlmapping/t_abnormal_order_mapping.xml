<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nilo.dms.dao.AbnormalOrderDao">

    <!-- 实体bean与数据字段对应关系 -->
    <resultMap id="abnormalDO" type="com.nilo.dms.dao.dataobject.AbnormalOrderDO">
        <result property="id" column="id" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="merchantId" column="merchant_id" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="orderNo" column="order_no" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="abnormalType" column="abnormal_type" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="abnormalNo" column="abnormal_no" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="reason" column="reason" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="remark" column="remark" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="status" column="status" javaType="java.lang.Integer"
                jdbcType="INTEGER"/>

        <result property="createdBy" column="created_by" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="createdTime" column="created_time" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="updatedTime" column="updated_time" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="version" column="version" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, merchant_id,abnormal_no,order_no,abnormal_type,reason,status,remark,created_by ,created_time , updated_time ,version
    </sql>

    <!-- 插入语句 -->
    <insert id="insert" parameterType="com.nilo.dms.dao.dataobject.AbnormalOrderDO" statementType="PREPARED"
            useGeneratedKeys="true"
            keyProperty="id">
        INSERT INTO t_waybill_abnormal
        ( merchant_id,abnormal_no,order_no,reason,abnormal_type,status,remark,created_by ,created_time , updated_time ,version)
        VALUES
        ( #{merchantId},#{abnormalNo},#{orderNo}, #{reason},#{abnormalType}, #{status},#{remark},#{createdBy} ,UNIX_TIMESTAMP(NOW()),UNIX_TIMESTAMP(NOW()),UUID())
    </insert>

    <select id="queryByAbnormalNo" resultMap="abnormalDO" statementType="PREPARED">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_waybill_abnormal
        WHERE merchant_id = #{merchantId} and abnormal_no=#{abnormalNo}
    </select>

    <select id="queryByOrderNo" resultMap="abnormalDO" statementType="PREPARED">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_waybill_abnormal
        WHERE merchant_id = #{merchantId} and order_no=#{orderNo}
    </select>

    <select id="queryByReferenceNo" resultMap="abnormalDO" statementType="PREPARED">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_waybill_abnormal
        WHERE merchant_id=#{merchant_id} and reference_no = #{referenceNo}
    </select>

    <select id="queryAbnormalListBy" resultMap="abnormalDO">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_waybill_abnormal
        WHERE merchant_id=#{merchantId}
        <if test="abnormalType !=null and abnormalType.size() > 0 ">
            <foreach collection="abnormalType" item="item" index="index" open="and (" separator="or" close=")">
                abnormal_Type=#{item}
            </foreach>
        </if>
        <if test="fromCreatedTime !=null ">
            and created_time >= #{fromCreatedTime}
        </if>
        <if test="toCreatedTime !=null ">
            and  <![CDATA[ created_time <= #{toCreatedTime} ]]>
        </if>
        <if test="status !=null and status.size() > 0 ">
            <foreach collection="status" item="item" index="index" open="and (" separator="or" close=")">
                status=#{item}
            </foreach>
        </if>
        <if test="orderNo !=null and orderNo !='' ">
            and order_no like CONCAT( CONCAT('%',#{orderNo}),'%')
        </if>
        <if test="abnormalNo !=null and abnormalNo !='' ">
            and abnormal_no like CONCAT( CONCAT('%',#{abnormalNo}),'%')
        </if>
        <if test="reason !=null and reason !='' ">
            and reason = #{reason}
        </if>
        order by created_time desc
        limit #{offset} , #{limit}

    </select>

    <select id="queryCountBy" resultType="java.lang.Long" >
        SELECT count(1)
        FROM t_waybill_abnormal
        WHERE merchant_id=#{merchantId}
        <if test="abnormalType !=null and abnormalType.size() > 0 ">
            <foreach collection="abnormalType" item="item" index="index" open="and (" separator="or" close=")">
                abnormal_Type=#{item}
            </foreach>
        </if>
        <if test="fromCreatedTime !=null ">
            and created_time >= #{fromCreatedTime}
        </if>
        <if test="toCreatedTime !=null ">
            and  <![CDATA[ created_time <= #{toCreatedTime} ]]>
        </if>
        <if test="status !=null and status.size() > 0 ">
            <foreach collection="status" item="item" index="index" open="and (" separator="or" close=")">
                status=#{item}
            </foreach>
        </if>
        <if test="orderNo !=null and orderNo !='' ">
            and order_no like CONCAT( CONCAT('%',#{orderNo}),'%')
        </if>
        <if test="abnormalNo !=null and abnormalNo !='' ">
            and abnormal_no like CONCAT( CONCAT('%',#{abnormalNo}),'%')
        </if>
        <if test="reason !=null and reason !='' ">
            and reason = #{reason}
        </if>
        order by null
    </select>

    <!-- 动态更新语句 -->
    <update id="update" parameterType="com.nilo.dms.dao.dataobject.AbnormalOrderDO" statementType="PREPARED">
        update t_waybill_abnormal
        <trim prefix="set" suffixOverrides="," suffix="where merchant_Id=#{merchantId} and abnormal_no=#{abnormalNo}">
            <if test="status != null ">
                status = #{status},
            </if>
            updated_time=UNIX_TIMESTAMP(NOW()),version=UUID()
        </trim>
    </update>

</mapper>