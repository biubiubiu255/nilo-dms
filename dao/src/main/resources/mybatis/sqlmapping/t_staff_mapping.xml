<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nilo.dms.dao.StaffDao">

    <!-- 实体bean与数据字段对应关系 -->
    <resultMap id="staffDO" type="com.nilo.dms.dao.dataobject.StaffDO">
        <result property="id" column="id" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="userId" column="user_id" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="merchantId" column="merchant_id" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="companyId" column="company_id" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="departmentId" column="department_id" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="staffId" column="staff_id" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="realName" column="real_name" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="nickName" column="nick_name" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="job" column="job" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="title" column="title" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="titleLevel" column="title_level" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="titleTime" column="title_time" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="employTime" column="employ_time" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="regularTime" column="regular_time" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="resignedTime" column="resigned_time" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="sex" column="sex" javaType="java.lang.Integer"
                jdbcType="INTEGER"/>
        <result property="birthday" column="birthday" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="idCard" column="id_card" javaType="java.lang.String"
                jdbcType="VARCHAR"/>

        <result property="phone" column="phone" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="email" column="email" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
        <result property="address" column="address" javaType="java.lang.String"
                jdbcType="VARCHAR"/>

        <result property="outsource" column="outsource" javaType="java.lang.String"
                jdbcType="VARCHAR"/>

        <result property="isRider" column="is_rider" javaType="java.lang.Integer"
                jdbcType="INTEGER"/>
        <result property="status" column="status" javaType="java.lang.Integer"
                jdbcType="INTEGER"/>
        <result property="createdTime" column="created_time" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="updatedTime" column="updated_time" javaType="java.lang.Long"
                jdbcType="INTEGER"/>
        <result property="version" column="version" javaType="java.lang.String"
                jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id ,outsource,user_id,staff_id,company_id,merchant_id,department_id,is_rider,real_name,nick_name,job,title,title_time,title_level,employ_time,resigned_time,regular_time,sex,birthday,id_card,phone,email,address,status,created_time , updated_time ,version
    </sql>

    <!-- 插入语句 -->
    <insert id="insert" parameterType="com.nilo.dms.dao.dataobject.StaffDO" statementType="PREPARED"
            useGeneratedKeys="true"
            keyProperty="id">
        INSERT INTO t_bas_staff
        (outsource,user_id,staff_id,company_id,merchant_id,department_id,is_rider,real_name,nick_name,job,title,title_time,title_level,employ_time,resigned_time,regular_time,sex,birthday,id_card,phone,email,address,status,created_time , updated_time ,version)
        VALUES
        (#{outsource},#{userId},#{staffId},#{companyId},#{merchantId}, #{departmentId},#{isRider},#{realName},#{nickName},#{job},#{title},#{titleTime},#{titleLevel},#{employTime},#{resignedTime},#{regularTime},#{sex},#{birthday},#{idCard},#{phone},#{email},#{address},#{status}, UNIX_TIMESTAMP(NOW()),UNIX_TIMESTAMP(NOW()),UUID())
    </insert>
    <!-- 动态更新语句 -->
    <update id="update" parameterType="com.nilo.dms.dao.dataobject.StaffDO" statementType="PREPARED">
        update t_bas_staff
        <trim prefix="set" suffixOverrides="," suffix="where merchant_id= #{merchantId} and staff_id=#{staffId} ">
            <if test="departmentId != null and departmentId != ''">
                department_id = #{departmentId},
            </if>
            <if test="realName != null and realName != ''">
                real_Name = #{realName},
            </if>
            <if test="nickName != null and nickName != ''">
                nick_Name = #{nickName},
            </if>
            <if test="job != null and job != ''">
                job = #{job},
            </if>
            <if test="isRider != null">
                is_rider = #{isRider},
            </if>
            <if test="outsource != null and outsource != ''">
                outsource = #{outsource},
            </if>
            <if test="title != null and title != ''">
                title = #{title},
            </if>
            <if test="titleTime != null and titleTime != ''">
                title_Time = #{titleTime},
            </if>
            <if test="titleLevel != null and titleLevel != ''">
                title_Level = #{titleLevel},
            </if>
            <if test="birthday != null and birthday != ''">
                birthday = #{birthday},
            </if>
            <if test="sex != null and sex != ''">
                sex = #{sex},
            </if>
            <if test="idCard != null and idCard != ''">
                id_Card = #{idCard},
            </if>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="address != null and address != ''">
                address = #{address},
            </if>
            <if test="status != null ">
                status = #{status},
            </if>
            <if test="regularTime != null ">
                regular_Time = #{regularTime},
            </if>
            <if test="resignedTime != null ">
                resigned_Time = #{resignedTime},
            </if>
            updated_time=UNIX_TIMESTAMP(NOW()),version=UUID()
        </trim>
    </update>


    <!-- 查询所有用户信息 -->
    <select id="queryBy" resultMap="staffDO" statementType="PREPARED">
        SELECT SQL_CALC_FOUND_ROWS
        <include refid="Base_Column_List"/>
        FROM t_bas_staff where company_id =#{companyId}
        <if test="departmentId != null and departmentId != ''">
            and department_id = #{departmentId}
        </if>
        <if test="staffId != null and staffId != ''">
            and staff_id = #{staffId}
        </if>
        <if test="name != null and name != ''">
            and( nick_name like CONCAT( CONCAT('%',#{name}),'%') or real_name like CONCAT( CONCAT('%',#{name}),'%'))
        </if>
        order by created_time desc
        limit #{offset} , #{limit}
    </select>


    <select id="queryByStaffId" resultMap="staffDO" statementType="PREPARED">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_bas_staff where staff_id = #{staffId}
    </select>

    <select id="queryAllBy" resultMap="staffDO" statementType="PREPARED">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_bas_staff where company_id =#{companyId}
        <if test="departmentId != null and departmentId != ''">
            and department_id = #{departmentId}
        </if>
    </select>

    <select id="queryAllRider" resultMap="staffDO" statementType="PREPARED">
        SELECT
        t.user_id,staff_id,company_id,t.merchant_id,department_id,is_rider,real_name,nick_name,job,title,title_time,title_level,employ_time,resigned_time,regular_time,sex,birthday,id_card,t.phone,t.email,t.address,t.status,t.created_time , t.updated_time ,t.version
        FROM t_bas_staff t left join t_sys_user_login l on t.staff_id= l.user_name where company_id =#{companyId} and is_rider = 1 and t.status in (1,2) and l.status=1
        <if test="outsource != null">
            and outsource = #{outsource}
        </if>

    </select>

    <select id="queryNetworkStaff" resultMap="staffDO" statementType="PREPARED">
        SELECT
         s.user_id,staff_id,company_id,merchant_id,department_id,is_rider,real_name,nick_name,job,title,title_time,title_level,employ_time,resigned_time,regular_time,sex,birthday,id_card,status
        FROM
	    t_bas_staff s LEFT join t_sys_user_network n on s.user_id = n.user_id
        WHERE
	    n.distribution_network_id = #{networkId}
    </select>


    <select id="findstaffByIDs" resultMap="staffDO" statementType="PREPARED" parameterType="java.util.ArrayList">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_bas_staff where user_id in
        <foreach collection="arr" index="index" item="now" open="(" close=")" separator=",">
            #{now}
        </foreach>
    </select>


</mapper>